WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// Main query structure - allow clauses in any order
query = {
    SOI ~
    (from_clause | select_clause | where_clause)+ ~
    EOI
}

// Basic clauses
from_clause = { "from" ~ stream_identifier ~ ":" ~ stream_type }
select_clause = { "select" ~ (aggregate_expr | complex_op | identifier) }
where_clause = { "where" ~ where_conditions }

// Stream definitions
stream_identifier = @{ ('a'..'z' | "_") ~ ('a'..'z' | '0'..'9' | "_")* }
stream_type = { "Stream" }

complex_op = {identifier ~ symbol ~ (number | identifier) }

// Aggregate expressions
aggregate_expr = { aggregate_func ~ "(" ~ identifier ~ ")" }
aggregate_func = { "max" | "min" | "avg" }

// Basic building blocks
identifier = @{ ('a'..'z' | "_") ~ ('a'..'z' | '0'..'9' | "_")* }
number = @{ 
    ('0'..'9')+ // Integer part
    ~ ("." ~ ('0'..'9')+)? // Optional decimal part
}
symbol = @{ ("^"| "+" | "-" | "*" | "/")}

// Binary logical operators
binary_op = { 
    ^"AND" | 
    ^"OR"
}

// Conditions for WHERE clause
condition = { identifier ~ comparison_op ~ (number | identifier) }
comparison_op = { ">=" | "<=" | "!=" | ">" | "<" | "=" }
where_conditions = { condition ~ (binary_op ~ condition)* }

// Optional method chain syntax for filter and aggregation operations
method_chain = { "." ~ (filter_op | agg_op) }
filter_op = { "filter" ~ "(" ~ condition ~ ")" }
agg_op = { ("max" | "min" | "avg") ~ "(" ~ identifier ~ ")" }
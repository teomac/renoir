WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// Basic building blocks
identifier = @{ ('a'..'z' | "_") ~ ('a'..'z' | '0'..'9' | "_")* }
number = @{ 
    ('0'..'9')+ // Integer part
    ~ ("." ~ ('0'..'9')+)? // Optional decimal part
}
boolean_keyword = @{ ^"true" | ^"false" }
symbol = @{ ("^"| "+" | "-" | "*" | "/")}
value = _{ qualified_column | number | boolean_keyword | identifier }

as_keyword = { "as" }
in_keyword = { "in" }
join = { "join" }
on = { "on" }

// Main query structure - allow clauses in any order
query = {
    SOI ~
    (from_clause | select_clause | where_clause)+ ~
    EOI
}

// Basic clauses
from_clause = { 
    "from" ~ 
    scan_expr ~
    (join ~ scan_expr ~ on ~ join_condition)?
}

scan_expr = { 
    identifier ~ 
    (as_keyword ~ identifier)? ~ 
    in_keyword ~ 
    stream_input 
}

join_condition = {
    qualified_column ~ "==" ~ qualified_column
}

qualified_column = {
    identifier ~ "." ~ identifier
}

stream_input = @{ ('a'..'z' | "_") ~ ('a'..'z' | '0'..'9' | "_")* }


select_clause = { "select" ~ (aggregate_expr | complex_op | qualified_column | identifier) }
where_clause = { "where" ~ where_conditions }

// Stream definitions
stream_identifier = @{ ('a'..'z' | "_") ~ ('a'..'z' | '0'..'9' | "_")* }
stream_type = { "Stream" }

complex_op = {(qualified_column | identifier) ~ symbol ~ (identifier | number) }

// Aggregate expressions
aggregate_expr = { aggregate_func ~ "(" ~ identifier ~ ")" }
aggregate_func = { "max" | "min" | "avg" }

// Binary logical operators
binary_op = { 
    ^"AND" | 
    ^"OR"
}

// Conditions for WHERE clause
condition = { (qualified_column | identifier) ~ comparison_op ~ value }
comparison_op = @{ ">=" | "<=" | "!=" | ">" | "<" | "=" | "=="}
where_conditions = { condition ~ (binary_op ~ condition)* }

// Optional method chain syntax for filter and aggregation operations
method_chain = { "." ~ (filter_op | agg_op) }
filter_op = { "filter" ~ "(" ~ condition ~ ")" }
agg_op = { ("max" | "min" | "avg") ~ "(" ~ identifier ~ ")" }